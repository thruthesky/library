<?php
/**
 *
 *
 *
 *
 */
// https://docs.google.com/document/d/1koxonGQl20ER7HZqUfHd6L53YXT5fPlJxCEwrhRqsN4/edit#
use Drupal\library\Library;
use Symfony\Component\Yaml\Yaml;

use Drupal\library\Entity\Category;

define('MAX_DOMAIN', 10);

if ( ! function_exists('di') ) {
    function di($obj)
    {
        echo '<pre>';
        print_r($obj);
        echo '</pre>';
    }
}

/**
 * @param $k
 * @param null $v
 * @return mixed
 *
 * @code
    state("user.jaeho.name", "JaeHo Song");
    state("user.jaeho.email", "thruthesky@gmail.com");
    state("user.jaeho.address", "Pampanga, Philippines");
    state("user.thruthesky.name", "Thru, T. Sky");
    state("user.thruthesky.address", "GimHae City, Republic of Korea");
    $configs = getStateGroup('user');
    print_r($configs);
    $configs = getStateGroup('user.thruthesky');
    print_r($configs);
    echo "My name is: " . state("user.jaeho.name");
 * @endcode
 */
function state($k, $v=null) {
    if ( $v !== null ) return \Drupal::state()->set($k,$v);
    else return \Drupal::state()->get($k);
}


/**
 * @param $name
 * @return array
 *
 * @note It caches in memory.
 *      - so, no matter how many times you get a group of config, it will only return the same as the first return.
 *      - It is okay to call this function as many times as you want.
 */
function getStateGroup($name) {
    global $_getStateGroup;
    if ( isset($_getStateGroup[$name]) ) return $_getStateGroup[$name];
    $result = db_select('key_value')
        ->fields(null, ['name','value'])
        ->condition('collection', 'state')
        ->condition('name', "$name%", 'LIKE')
        ->execute();
    $configs = [];
    while( $row = $result->fetchAssoc() ) {
        $configs[$row['name']] = unserialize($row['value']);
    }
    $_getStateGroup[$name] = $configs;
    return $_getStateGroup[$name];
}


function debug_log($str)
{
    Library::log($str);
}


/*for automatic routing by #theme*/
function library_theme()
{
  $routes = Yaml::parse(file_get_contents(drupal_get_path('module', 'library').'/library.routing.yml'));   
  
  $themes = [];
  foreach($routes as $name => $info) {
    $themes[$name] = [
      'variables' => [ 'data' => null],
      'template' => $name
    ];
		
  }

  return $themes;
}

function library_preprocess( &$variables, $hook )
{

    // debug_log("library_preprocess($hook) begins");

    // Library::error(-999, \Drupal\library\Language::string('library', 'version')); // test

    //Library::log(\Drupal::service('twig')->getFilters());
    //Library::log(\Drupal::service('twig')->getFunctions());



    $browser_id = Library::getBrowserID();
    Library::recordBrowserID($browser_id);



    $variables['error'] = Library::getError();
    $variables['language'] = Library::getLanguage();
    if ( Library::getLanguage() == 'ko' ) $variables['ko'] = true;
    $variables['myUid'] = Library::myUid();
    $variables['input'] = Library::input();

    //di('library.module');

    /**
     * Get 'theme' and 'sub_theme'
     */
    $variables['theme'] = Drupal::theme()->getActiveTheme()->getName() ;
    $variables['dir_theme'] = Drupal::theme()->getActiveTheme()->getPath();
    $variables['dir_templates'] = $variables['dir_theme'] . '/templates';
    $variables['sub_theme'] = null;
    $config = Library::getGroupConfig('theme');
    $domain = Library::domain_name();
    for ( $i = 1; $i <= MAX_DOMAIN; $i ++ ) {
        if ( ! empty($config["domain$i"]) ) {
            if ( strpos($config["domain$i"], $domain) !== false ) {
                $variables['sub_theme'] = $config["theme$i"];
                break;
            }
        }
    }

    $variables['url_site'] = Library::getSiteUrl();
    $variables['url_theme'] = $variables['url_site'] . '/' . $variables['dir_theme'];

    $variables['dir_macro'] = "modules/library/templates/macros";

    /**
     * Is the theme uses sub theme?
     */
    if ( $variables['sub_theme'] ) { // yes.
        $variables['dir_sub_theme'] = $variables['dir_theme'] . '/templates/' . $variables['sub_theme'];
        $variables['url_sub_theme'] = $variables['url_theme'] . '/templates/' . $variables['sub_theme'];
        $init = "$variables[dir_sub_theme]/init.php";
        if ( file_exists($init) ) include $init;
    }


    Library::parseErrorMessage($variables);



    $variables['#attached']['library'][] = 'library/global-styling';
    if ( Library::isLibraryCategoryPage() ) {
        $variables['#attached']['library'][] = 'library/category';
    }
	
	/*if $hook*/
	//to avoid multiple calls
	if( $hook == 'page' ){
		//on page, we will should be able to access the categories for the menu bar
		$variables['data']['category_entity_list'] = Category::loadAllCategories();
	}
	/*eo if $hook*/
}



/**
 * Implements hook_library_info_build().
 */
/**
 * Implements hook_library_info_build().
 */
function library_library_info_build() {
    $s = "library_library_info_build() begins";
    Library::log($s);
}