<?php
/**
 *
 *
 *
 *
 */
// https://docs.google.com/document/d/1koxonGQl20ER7HZqUfHd6L53YXT5fPlJxCEwrhRqsN4/edit#
use Drupal\library\Library;
use Symfony\Component\Yaml\Yaml;

use Drupal\library\Entity\Category;

define('MAX_DOMAIN', 10);
define('DIR_WE_LIBRARY', 'modules/library');

define('DIR_LIBRARY_DATA', 'public://library/');

if ( ! function_exists('di') ) {
    function di($obj)
    {
        echo '<pre>';
        print_r($obj);
        echo '</pre>';
    }
}

/**
 * @param $k
 * @param null $v
 * @return mixed
 *
 * @code
    state("user.jaeho.name", "JaeHo Song");
    state("user.jaeho.email", "thruthesky@gmail.com");
    state("user.jaeho.address", "Pampanga, Philippines");
    state("user.thruthesky.name", "Thru, T. Sky");
    state("user.thruthesky.address", "GimHae City, Republic of Korea");
    $configs = getStateGroup('user');
    print_r($configs);
    $configs = getStateGroup('user.thruthesky');
    print_r($configs);
    echo "My name is: " . state("user.jaeho.name");
 * @endcode
 */
function state($k, $v=null) {
    if ( $v !== null ) return \Drupal::state()->set($k,$v);
    else return \Drupal::state()->get($k);
}


/**
 * @param $name
 * @return array
 *
 * @note It caches in memory.
 *      - so, no matter how many times you get a group of config, it will only return the same as the first return.
 *      - It is okay to call this function as many times as you want.
 */
function getStateGroup($name) {
    global $_getStateGroup;
    if ( isset($_getStateGroup[$name]) ) return $_getStateGroup[$name];
    $result = db_select('key_value')
        ->fields(null, ['name','value'])
        ->condition('collection', 'state')
        ->condition('name', "$name%", 'LIKE')
        ->execute();
    $configs = [];
    while( $row = $result->fetchAssoc() ) {
        $configs[$row['name']] = unserialize($row['value']);
    }
    $_getStateGroup[$name] = $configs;
    return $_getStateGroup[$name];
}


function debug_log($str)
{
    Library::log($str);
}


/*for automatic routing by #theme*/
function library_theme()
{
    $routes = Yaml::parse(file_get_contents(drupal_get_path('module', 'library').'/library.routing.yml'));

    $themes = [];
    foreach($routes as $name => $info) {
        $themes[$name] = [
            'variables' => [ 'data' => null],
            'template' => $name
        ];
    }


    $themes['we.layout'] = [
        'variables' => [ 'data' => null ],
        'template' => 'we.layout'
    ];


    $themes['library.layout'] = [
        'variables' => [ 'data' => null ],
        'template' => 'library.layout'
    ];
    return $themes;
}

function library_preprocess( &$variables, $hook ) {

    // debug_log("library_preprocess($hook) begins");

    // Library::error(-999, \Drupal\library\Language::string('library', 'version')); // test

    //Library::log(\Drupal::service('twig')->getFilters());
    //Library::log(\Drupal::service('twig')->getFunctions());


    $browser_id = Library::getBrowserID();
    Library::recordBrowserID($browser_id);


    $variables['language'] = Library::getLanguage();

    if ($variables['language'] == 'ko') {
        $variables['ko'] = 1;
    }
    else {
        $variables['ko'] = 0;
    }







    /** @deprecated */
    $variables['myUid'] = Library::myUid();

    /** @note use my_uid */
    $variables['my_uid'] = Library::myUid();
    $variables['my_name'] = Library::myName();
	/*added by benjamin because it was not pushed*/
    $variables['domain'] = Library::domainNameWithoutWWW();

    $variables['input'] = Library::input();




    $variables['domain'] = Library::domainNameWithoutWWW();
    $variables['url_site'] = Library::getSiteUrl();
    $variables['dir_macro'] = "modules/library/templates/macros";


    $variables['dir_module'] = DIR_WE_LIBRARY;
    $variables['dir_module_library'] = DIR_WE_LIBRARY;

    /**
     * Get 'theme' and 'sub_theme'
     */
    $variables['theme'] = Drupal::theme()->getActiveTheme()->getName();
    $variables['dir_theme'] = Drupal::theme()->getActiveTheme()->getPath();
    $variables['dir_templates'] = $variables['dir_theme'] . '/templates';
    $variables['sub_theme'] = NULL;




    $variables = array_merge( $variables, Library::getSubsiteInformation() );



    if ( isset($variables['sub_admin']) ) {
        if ( $variables['sub_admin'] == Library::myName() ) $variables['is_site_admin'] = true;
    }


    $variables['url_theme'] = $variables['url_site'] . '/' . $variables['dir_theme'];

    /**
     * Is the theme uses sub theme?
     */
    if ($variables['sub_theme']) { // yes.
        $variables['dir_sub_theme'] = $variables['dir_theme'] . '/templates/' . $variables['sub_theme'];
        $variables['url_sub_theme'] = $variables['url_theme'] . '/templates/' . $variables['sub_theme'];
        $init = "$variables[dir_sub_theme]/init.php";
        if (file_exists($init)) {
            include $init;
        }
        if ( $hook == 'html' ) {
            $variables['head_title'] = [];
            $variables['head_title'][] = $variables['sub_theme_sitename'];

            $variables['url_favicon'] = "$variables[url_sub_theme]/favicon.ico";
        }
    }


    /**
     * @todo ?? what is it?
     */
    /*
    $type = theme_get_setting('favicon.mimetype');
    $page['#attached']['html_head_link'][][] = array(
        'rel' => 'shortcut icon',
        'href' => 'https://www.philgo.com/theme/philgo/favicon.ico',
        'type' => $type,
    );
    */



    $variables['#attached']['library'][] = 'library/global-styling';
    if (Library::isLibraryPage()) {
        if (Library::isLibraryCategoryPage()) {
            $variables['#attached']['library'][] = 'library/category';
        }
    }

    /*if $hook*/
    //to avoid multiple calls
    if ($hook == 'page') {
        //on page, we will should be able to access the categories for the menu bar
        $variables['data']['category_entity_list'] = Category::loadAllCategories();
    }
    /*eo if $hook*/



    $request = \Drupal::request();
    if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
        $route->setDefault('_title', 'H');
    }

    $variables['error'] = Library::getError();
    Library::parseErrorMessage($variables);
}


/**
 * Implements hook_library_info_build().
 */
/**
 * Implements hook_library_info_build().
 */
function library_library_info_build() {
    $s = "library_library_info_build() begins";
    Library::log($s);
}

